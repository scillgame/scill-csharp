/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// The Leaderboard object contains information about the leaderboard itself like the name and the id
    /// </summary>
    [DataContract]
        public partial class LeaderboardV2MemberRanking :  IEquatable<LeaderboardV2MemberRanking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardV2MemberRanking" /> class.
        /// </summary>
        /// <param name="leaderboardId">The id of the leaderboard.</param>
        /// <param name="leaderboardName">The name of the leaderboard.</param>
        /// <param name="leaderboardSortOrderAscending">Determines the results sort order. If true, the order is ascending, otherwise, it&#x27;s descending..</param>
        /// <param name="leaderboardMember">leaderboardMember.</param>
        public LeaderboardV2MemberRanking(string leaderboardId = default(string), string leaderboardName = default(string), bool? leaderboardSortOrderAscending = default(bool?), LeaderboardV2Member leaderboardMember = default(LeaderboardV2Member))
        {
            this.leaderboard_id = leaderboardId;
            this.leaderboard_name = leaderboardName;
            this.leaderboard_sort_order_ascending = leaderboardSortOrderAscending;
            this.leaderboard_member = leaderboardMember;
        }
        
        /// <summary>
        /// The id of the leaderboard
        /// </summary>
        /// <value>The id of the leaderboard</value>
        [DataMember(Name="leaderboard_id", EmitDefaultValue=false)]
        public string leaderboard_id { get; set; }

        /// <summary>
        /// The name of the leaderboard
        /// </summary>
        /// <value>The name of the leaderboard</value>
        [DataMember(Name="leaderboard_name", EmitDefaultValue=false)]
        public string leaderboard_name { get; set; }

        /// <summary>
        /// Determines the results sort order. If true, the order is ascending, otherwise, it&#x27;s descending.
        /// </summary>
        /// <value>Determines the results sort order. If true, the order is ascending, otherwise, it&#x27;s descending.</value>
        [DataMember(Name="leaderboard_sort_order_ascending", EmitDefaultValue=false)]
        public bool? leaderboard_sort_order_ascending { get; set; }

        /// <summary>
        /// Gets or Sets leaderboard_member
        /// </summary>
        [DataMember(Name="leaderboard_member", EmitDefaultValue=false)]
        public LeaderboardV2Member leaderboard_member { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaderboardV2MemberRanking {\n");
            sb.Append("  leaderboard_id: ").Append(leaderboard_id).Append("\n");
            sb.Append("  leaderboard_name: ").Append(leaderboard_name).Append("\n");
            sb.Append("  leaderboard_sort_order_ascending: ").Append(leaderboard_sort_order_ascending).Append("\n");
            sb.Append("  leaderboard_member: ").Append(leaderboard_member).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaderboardV2MemberRanking);
        }

        /// <summary>
        /// Returns true if LeaderboardV2MemberRanking instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaderboardV2MemberRanking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaderboardV2MemberRanking input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.leaderboard_id == input.leaderboard_id ||
                    (this.leaderboard_id != null &&
                    this.leaderboard_id.Equals(input.leaderboard_id))
                ) && 
                (
                    this.leaderboard_name == input.leaderboard_name ||
                    (this.leaderboard_name != null &&
                    this.leaderboard_name.Equals(input.leaderboard_name))
                ) && 
                (
                    this.leaderboard_sort_order_ascending == input.leaderboard_sort_order_ascending ||
                    (this.leaderboard_sort_order_ascending != null &&
                    this.leaderboard_sort_order_ascending.Equals(input.leaderboard_sort_order_ascending))
                ) && 
                (
                    this.leaderboard_member == input.leaderboard_member ||
                    (this.leaderboard_member != null &&
                    this.leaderboard_member.Equals(input.leaderboard_member))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.leaderboard_id != null)
                    hashCode = hashCode * 59 + this.leaderboard_id.GetHashCode();
                if (this.leaderboard_name != null)
                    hashCode = hashCode * 59 + this.leaderboard_name.GetHashCode();
                if (this.leaderboard_sort_order_ascending != null)
                    hashCode = hashCode * 59 + this.leaderboard_sort_order_ascending.GetHashCode();
                if (this.leaderboard_member != null)
                    hashCode = hashCode * 59 + this.leaderboard_member.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
