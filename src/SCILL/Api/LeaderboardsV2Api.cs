/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SCILL.Client;
using SCILL.Model;

namespace SCILL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILeaderboardsV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Leaderboard
        /// </summary>
        /// <remarks>
        /// Provides the selected leaderboard V2 rankings for a specific leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>LeaderboardV2Results</returns>
        LeaderboardV2Results GetLeaderboardV2 (string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null);

        /// <summary>
        /// Retrieve Leaderboard
        /// </summary>
        /// <remarks>
        /// Provides the selected leaderboard V2 rankings for a specific leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of LeaderboardV2Results</returns>
        ApiResponse<LeaderboardV2Results> GetLeaderboardV2WithHttpInfo (string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null);
        /// <summary>
        /// Retrieve user ranking for a single leaderboard V2
        /// </summary>
        /// <remarks>
        /// Returns a LeaderboardV2MemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>LeaderboardV2MemberRanking</returns>
        LeaderboardV2MemberRanking GetLeaderboardV2Ranking (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, string language = null);

        /// <summary>
        /// Retrieve user ranking for a single leaderboard V2
        /// </summary>
        /// <remarks>
        /// Returns a LeaderboardV2MemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of LeaderboardV2MemberRanking</returns>
        ApiResponse<LeaderboardV2MemberRanking> GetLeaderboardV2RankingWithHttpInfo (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, string language = null);
        /// <summary>
        /// Retrieve user rankings across all leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardV2MemberRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;LeaderboardV2MemberRanking&gt;</returns>
        List<LeaderboardV2MemberRanking> GetLeaderboardV2Rankings (string memberType, string memberId, string startDate = null, string endDate = null, string aggregate = null, string language = null);

        /// <summary>
        /// Retrieve user rankings across all leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardV2MemberRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;LeaderboardV2MemberRanking&gt;</returns>
        ApiResponse<List<LeaderboardV2MemberRanking>> GetLeaderboardV2RankingsWithHttpInfo (string memberType, string memberId, string startDate = null, string endDate = null, string aggregate = null, string language = null);
        /// <summary>
        /// Retrieve Leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardV2Results items defined for the application.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;LeaderboardV2Results&gt;</returns>
        List<LeaderboardV2Results> GetLeaderboardsV2 (string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null);

        /// <summary>
        /// Retrieve Leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardV2Results items defined for the application.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;LeaderboardV2Results&gt;</returns>
        ApiResponse<List<LeaderboardV2Results>> GetLeaderboardsV2WithHttpInfo (string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null);
        /// <summary>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </summary>
        /// <remarks>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The application ID</param>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <returns>ActionResponse</returns>
        ActionResponse ResetLeaderboardV2Rankings (string appId, string leaderboardId);

        /// <summary>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </summary>
        /// <remarks>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The application ID</param>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> ResetLeaderboardV2RankingsWithHttpInfo (string appId, string leaderboardId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Leaderboard
        /// </summary>
        /// <remarks>
        /// Provides the selected leaderboard V2 rankings for a specific leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of LeaderboardV2Results</returns>
        System.Threading.Tasks.Task<LeaderboardV2Results> GetLeaderboardV2Async (string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null);

        /// <summary>
        /// Retrieve Leaderboard
        /// </summary>
        /// <remarks>
        /// Provides the selected leaderboard V2 rankings for a specific leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (LeaderboardV2Results)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaderboardV2Results>> GetLeaderboardV2AsyncWithHttpInfo (string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null);
        /// <summary>
        /// Retrieve user ranking for a single leaderboard V2
        /// </summary>
        /// <remarks>
        /// Returns a LeaderboardV2MemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of LeaderboardV2MemberRanking</returns>
        System.Threading.Tasks.Task<LeaderboardV2MemberRanking> GetLeaderboardV2RankingAsync (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, string language = null);

        /// <summary>
        /// Retrieve user ranking for a single leaderboard V2
        /// </summary>
        /// <remarks>
        /// Returns a LeaderboardV2MemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (LeaderboardV2MemberRanking)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaderboardV2MemberRanking>> GetLeaderboardV2RankingAsyncWithHttpInfo (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, string language = null);
        /// <summary>
        /// Retrieve user rankings across all leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardV2MemberRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;LeaderboardV2MemberRanking&gt;</returns>
        System.Threading.Tasks.Task<List<LeaderboardV2MemberRanking>> GetLeaderboardV2RankingsAsync (string memberType, string memberId, string startDate = null, string endDate = null, string aggregate = null, string language = null);

        /// <summary>
        /// Retrieve user rankings across all leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardV2MemberRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderboardV2MemberRanking&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LeaderboardV2MemberRanking>>> GetLeaderboardV2RankingsAsyncWithHttpInfo (string memberType, string memberId, string startDate = null, string endDate = null, string aggregate = null, string language = null);
        /// <summary>
        /// Retrieve Leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardV2Results items defined for the application.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;LeaderboardV2Results&gt;</returns>
        System.Threading.Tasks.Task<List<LeaderboardV2Results>> GetLeaderboardsV2Async (string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null);

        /// <summary>
        /// Retrieve Leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardV2Results items defined for the application.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderboardV2Results&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LeaderboardV2Results>>> GetLeaderboardsV2AsyncWithHttpInfo (string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null);
        /// <summary>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </summary>
        /// <remarks>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The application ID</param>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> ResetLeaderboardV2RankingsAsync (string appId, string leaderboardId);

        /// <summary>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </summary>
        /// <remarks>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The application ID</param>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ResetLeaderboardV2RankingsAsyncWithHttpInfo (string appId, string leaderboardId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LeaderboardsV2Api : ILeaderboardsV2Api
    {
        private SCILL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public LeaderboardsV2Api(String basePath)
        {
            this.Configuration = new SCILL.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsV2Api"/> class
        /// </summary>
        /// <returns></returns>
        public LeaderboardsV2Api()
        {
            this.Configuration = SCILL.Client.Configuration.Default;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LeaderboardsV2Api(SCILL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SCILL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SCILL.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SCILL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve Leaderboard Provides the selected leaderboard V2 rankings for a specific leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>LeaderboardV2Results</returns>
        public LeaderboardV2Results GetLeaderboardV2 (string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null)
        {
             ApiResponse<LeaderboardV2Results> localVarResponse = GetLeaderboardV2WithHttpInfo(leaderboardId, startDate, endDate, aggregate, currentPage, currentPosition, pageSize, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Leaderboard Provides the selected leaderboard V2 rankings for a specific leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of LeaderboardV2Results</returns>
        public ApiResponse< LeaderboardV2Results > GetLeaderboardV2WithHttpInfo (string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null)
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardsV2Api->GetLeaderboardV2");

            var localVarPath = "/api/v2/leaderboards/{leaderboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (leaderboardId != null) localVarPathParams.Add("leaderboardId", this.Configuration.ApiClient.ParameterToString(leaderboardId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (aggregate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregate", aggregate)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (currentPosition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPosition", currentPosition)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LeaderboardV2Results>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LeaderboardV2Results) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LeaderboardV2Results)));
        }

        /// <summary>
        /// Retrieve Leaderboard Provides the selected leaderboard V2 rankings for a specific leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of LeaderboardV2Results</returns>
        public async System.Threading.Tasks.Task<LeaderboardV2Results> GetLeaderboardV2Async (string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null)
        {
             ApiResponse<LeaderboardV2Results> localVarResponse = await GetLeaderboardV2AsyncWithHttpInfo(leaderboardId, startDate, endDate, aggregate, currentPage, currentPosition, pageSize, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Leaderboard Provides the selected leaderboard V2 rankings for a specific leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (LeaderboardV2Results)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LeaderboardV2Results>> GetLeaderboardV2AsyncWithHttpInfo (string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null)
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardsV2Api->GetLeaderboardV2");

            var localVarPath = "/api/v2/leaderboards/{leaderboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (leaderboardId != null) localVarPathParams.Add("leaderboardId", this.Configuration.ApiClient.ParameterToString(leaderboardId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (aggregate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregate", aggregate)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (currentPosition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPosition", currentPosition)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LeaderboardV2Results>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LeaderboardV2Results) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LeaderboardV2Results)));
        }

        /// <summary>
        /// Retrieve user ranking for a single leaderboard V2 Returns a LeaderboardV2MemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>LeaderboardV2MemberRanking</returns>
        public LeaderboardV2MemberRanking GetLeaderboardV2Ranking (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, string language = null)
        {
             ApiResponse<LeaderboardV2MemberRanking> localVarResponse = GetLeaderboardV2RankingWithHttpInfo(memberType, memberId, leaderboardId, startDate, endDate, aggregate, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user ranking for a single leaderboard V2 Returns a LeaderboardV2MemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of LeaderboardV2MemberRanking</returns>
        public ApiResponse< LeaderboardV2MemberRanking > GetLeaderboardV2RankingWithHttpInfo (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, string language = null)
        {
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling LeaderboardsV2Api->GetLeaderboardV2Ranking");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling LeaderboardsV2Api->GetLeaderboardV2Ranking");
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardsV2Api->GetLeaderboardV2Ranking");

            var localVarPath = "/api/v2/leaderboards-members/{memberType}/{memberId}/{leaderboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberType != null) localVarPathParams.Add("memberType", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (leaderboardId != null) localVarPathParams.Add("leaderboardId", this.Configuration.ApiClient.ParameterToString(leaderboardId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (aggregate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregate", aggregate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardV2Ranking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LeaderboardV2MemberRanking>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LeaderboardV2MemberRanking) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LeaderboardV2MemberRanking)));
        }

        /// <summary>
        /// Retrieve user ranking for a single leaderboard V2 Returns a LeaderboardV2MemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of LeaderboardV2MemberRanking</returns>
        public async System.Threading.Tasks.Task<LeaderboardV2MemberRanking> GetLeaderboardV2RankingAsync (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, string language = null)
        {
             ApiResponse<LeaderboardV2MemberRanking> localVarResponse = await GetLeaderboardV2RankingAsyncWithHttpInfo(memberType, memberId, leaderboardId, startDate, endDate, aggregate, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user ranking for a single leaderboard V2 Returns a LeaderboardV2MemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (LeaderboardV2MemberRanking)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LeaderboardV2MemberRanking>> GetLeaderboardV2RankingAsyncWithHttpInfo (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string aggregate = null, string language = null)
        {
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling LeaderboardsV2Api->GetLeaderboardV2Ranking");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling LeaderboardsV2Api->GetLeaderboardV2Ranking");
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardsV2Api->GetLeaderboardV2Ranking");

            var localVarPath = "/api/v2/leaderboards-members/{memberType}/{memberId}/{leaderboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberType != null) localVarPathParams.Add("memberType", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (leaderboardId != null) localVarPathParams.Add("leaderboardId", this.Configuration.ApiClient.ParameterToString(leaderboardId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (aggregate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregate", aggregate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardV2Ranking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LeaderboardV2MemberRanking>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LeaderboardV2MemberRanking) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LeaderboardV2MemberRanking)));
        }

        /// <summary>
        /// Retrieve user rankings across all leaderboards Returns an array of LeaderboardV2MemberRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;LeaderboardV2MemberRanking&gt;</returns>
        public List<LeaderboardV2MemberRanking> GetLeaderboardV2Rankings (string memberType, string memberId, string startDate = null, string endDate = null, string aggregate = null, string language = null)
        {
             ApiResponse<List<LeaderboardV2MemberRanking>> localVarResponse = GetLeaderboardV2RankingsWithHttpInfo(memberType, memberId, startDate, endDate, aggregate, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve user rankings across all leaderboards Returns an array of LeaderboardV2MemberRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;LeaderboardV2MemberRanking&gt;</returns>
        public ApiResponse< List<LeaderboardV2MemberRanking> > GetLeaderboardV2RankingsWithHttpInfo (string memberType, string memberId, string startDate = null, string endDate = null, string aggregate = null, string language = null)
        {
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling LeaderboardsV2Api->GetLeaderboardV2Rankings");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling LeaderboardsV2Api->GetLeaderboardV2Rankings");

            var localVarPath = "/api/v2/leaderboards-members/{memberType}/{memberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberType != null) localVarPathParams.Add("memberType", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (aggregate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregate", aggregate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardV2Rankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderboardV2MemberRanking>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LeaderboardV2MemberRanking>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderboardV2MemberRanking>)));
        }

        /// <summary>
        /// Retrieve user rankings across all leaderboards Returns an array of LeaderboardV2MemberRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;LeaderboardV2MemberRanking&gt;</returns>
        public async System.Threading.Tasks.Task<List<LeaderboardV2MemberRanking>> GetLeaderboardV2RankingsAsync (string memberType, string memberId, string startDate = null, string endDate = null, string aggregate = null, string language = null)
        {
             ApiResponse<List<LeaderboardV2MemberRanking>> localVarResponse = await GetLeaderboardV2RankingsAsyncWithHttpInfo(memberType, memberId, startDate, endDate, aggregate, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve user rankings across all leaderboards Returns an array of LeaderboardV2MemberRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderboardV2MemberRanking&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LeaderboardV2MemberRanking>>> GetLeaderboardV2RankingsAsyncWithHttpInfo (string memberType, string memberId, string startDate = null, string endDate = null, string aggregate = null, string language = null)
        {
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling LeaderboardsV2Api->GetLeaderboardV2Rankings");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling LeaderboardsV2Api->GetLeaderboardV2Rankings");

            var localVarPath = "/api/v2/leaderboards-members/{memberType}/{memberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberType != null) localVarPathParams.Add("memberType", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (aggregate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregate", aggregate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardV2Rankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderboardV2MemberRanking>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LeaderboardV2MemberRanking>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderboardV2MemberRanking>)));
        }

        /// <summary>
        /// Retrieve Leaderboards Returns an array of LeaderboardV2Results items defined for the application.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;LeaderboardV2Results&gt;</returns>
        public List<LeaderboardV2Results> GetLeaderboardsV2 (string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null)
        {
             ApiResponse<List<LeaderboardV2Results>> localVarResponse = GetLeaderboardsV2WithHttpInfo(startDate, endDate, aggregate, currentPage, currentPosition, pageSize, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Leaderboards Returns an array of LeaderboardV2Results items defined for the application.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;LeaderboardV2Results&gt;</returns>
        public ApiResponse< List<LeaderboardV2Results> > GetLeaderboardsV2WithHttpInfo (string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null)
        {

            var localVarPath = "/api/v2/leaderboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (aggregate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregate", aggregate)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (currentPosition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPosition", currentPosition)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderboardV2Results>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LeaderboardV2Results>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderboardV2Results>)));
        }

        /// <summary>
        /// Retrieve Leaderboards Returns an array of LeaderboardV2Results items defined for the application.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;LeaderboardV2Results&gt;</returns>
        public async System.Threading.Tasks.Task<List<LeaderboardV2Results>> GetLeaderboardsV2Async (string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null)
        {
             ApiResponse<List<LeaderboardV2Results>> localVarResponse = await GetLeaderboardsV2AsyncWithHttpInfo(startDate, endDate, aggregate, currentPage, currentPosition, pageSize, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Leaderboards Returns an array of LeaderboardV2Results items defined for the application.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="aggregate">The aggregate function for the calculation of the results - can be BEST (returns a single score - either the lowest if ASC sorting is used, or the highest if DESC is used) or SUM (default value - increments (sums up) the scores). (optional)</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="currentPosition">The starting leaderboard position from which the results should be loaded. The number of results is controlled via the pageSize variable. This parameter overrides the currentPage parameter. (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderboardV2Results&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LeaderboardV2Results>>> GetLeaderboardsV2AsyncWithHttpInfo (string startDate = null, string endDate = null, string aggregate = null, int? currentPage = null, int? currentPosition = null, int? pageSize = null, string language = null)
        {

            var localVarPath = "/api/v2/leaderboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (aggregate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "aggregate", aggregate)); // query parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (currentPosition != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPosition", currentPosition)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderboardV2Results>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LeaderboardV2Results>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderboardV2Results>)));
        }

        /// <summary>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2. Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The application ID</param>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse ResetLeaderboardV2Rankings (string appId, string leaderboardId)
        {
             ApiResponse<ActionResponse> localVarResponse = ResetLeaderboardV2RankingsWithHttpInfo(appId, leaderboardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2. Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The application ID</param>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public ApiResponse< ActionResponse > ResetLeaderboardV2RankingsWithHttpInfo (string appId, string leaderboardId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LeaderboardsV2Api->ResetLeaderboardV2Rankings");
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardsV2Api->ResetLeaderboardV2Rankings");

            var localVarPath = "/api/v2/leaderboards-reset/{appId}/{leaderboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (leaderboardId != null) localVarPathParams.Add("leaderboardId", this.Configuration.ApiClient.ParameterToString(leaderboardId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetLeaderboardV2Rankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2. Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The application ID</param>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> ResetLeaderboardV2RankingsAsync (string appId, string leaderboardId)
        {
             ApiResponse<ActionResponse> localVarResponse = await ResetLeaderboardV2RankingsAsyncWithHttpInfo(appId, leaderboardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes all leaderboard V2 data, i.e. reset the leaderboard V2. Deletes all leaderboard V2 data, i.e. reset the leaderboard V2.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The application ID</param>
        /// <param name="leaderboardId">The leaderboard ID</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ResetLeaderboardV2RankingsAsyncWithHttpInfo (string appId, string leaderboardId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LeaderboardsV2Api->ResetLeaderboardV2Rankings");
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardsV2Api->ResetLeaderboardV2Rankings");

            var localVarPath = "/api/v2/leaderboards-reset/{appId}/{leaderboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (leaderboardId != null) localVarPathParams.Add("leaderboardId", this.Configuration.ApiClient.ParameterToString(leaderboardId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetLeaderboardV2Rankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

    }
}
