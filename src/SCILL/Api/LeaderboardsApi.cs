/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SCILL.Client;
using SCILL.Model;

namespace SCILL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ILeaderboardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Leaderboard
        /// </summary>
        /// <remarks>
        /// Provides the current leaderboard rankings for a specific leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Leaderboard</returns>
        Leaderboard GetLeaderboard (string leaderboardId, int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null);

        /// <summary>
        /// Retrieve Leaderboard
        /// </summary>
        /// <remarks>
        /// Provides the current leaderboard rankings for a specific leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of Leaderboard</returns>
        ApiResponse<Leaderboard> GetLeaderboardWithHttpInfo (string leaderboardId, int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null);
        /// <summary>
        /// Retrieve User Ranking
        /// </summary>
        /// <remarks>
        /// Returns a LeaderboardMemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>LeaderboardMemberRanking</returns>
        LeaderboardMemberRanking GetLeaderboardRanking (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string language = null);

        /// <summary>
        /// Retrieve User Ranking
        /// </summary>
        /// <remarks>
        /// Returns a LeaderboardMemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of LeaderboardMemberRanking</returns>
        ApiResponse<LeaderboardMemberRanking> GetLeaderboardRankingWithHttpInfo (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string language = null);
        /// <summary>
        /// Retrieve User Rankings
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;LeaderboardMemberRanking&gt;</returns>
        List<LeaderboardMemberRanking> GetLeaderboardRankings (string memberType, string memberId, string startDate = null, string endDate = null, string language = null);

        /// <summary>
        /// Retrieve User Rankings
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;LeaderboardMemberRanking&gt;</returns>
        ApiResponse<List<LeaderboardMemberRanking>> GetLeaderboardRankingsWithHttpInfo (string memberType, string memberId, string startDate = null, string endDate = null, string language = null);
        /// <summary>
        /// Retrieve Leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of Leaderboard items defined for the application.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;Leaderboard&gt;</returns>
        List<Leaderboard> GetLeaderboards (int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null);

        /// <summary>
        /// Retrieve Leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of Leaderboard items defined for the application.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;Leaderboard&gt;</returns>
        ApiResponse<List<Leaderboard>> GetLeaderboardsWithHttpInfo (int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null);
        /// <summary>
        /// Reset user leaderboard data
        /// </summary>
        /// <remarks>
        /// Delete all leaderboard data, i.e. reset the leaderboard for the specified member.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="appId">The application ID</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <returns>ActionResponse</returns>
        ActionResponse ResetLeaderboardRankings (string memberType, string appId, string memberId);

        /// <summary>
        /// Reset user leaderboard data
        /// </summary>
        /// <remarks>
        /// Delete all leaderboard data, i.e. reset the leaderboard for the specified member.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="appId">The application ID</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        ApiResponse<ActionResponse> ResetLeaderboardRankingsWithHttpInfo (string memberType, string appId, string memberId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Leaderboard
        /// </summary>
        /// <remarks>
        /// Provides the current leaderboard rankings for a specific leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of Leaderboard</returns>
        System.Threading.Tasks.Task<Leaderboard> GetLeaderboardAsync (string leaderboardId, int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null);

        /// <summary>
        /// Retrieve Leaderboard
        /// </summary>
        /// <remarks>
        /// Provides the current leaderboard rankings for a specific leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (Leaderboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<Leaderboard>> GetLeaderboardAsyncWithHttpInfo (string leaderboardId, int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null);
        /// <summary>
        /// Retrieve User Ranking
        /// </summary>
        /// <remarks>
        /// Returns a LeaderboardMemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of LeaderboardMemberRanking</returns>
        System.Threading.Tasks.Task<LeaderboardMemberRanking> GetLeaderboardRankingAsync (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string language = null);

        /// <summary>
        /// Retrieve User Ranking
        /// </summary>
        /// <remarks>
        /// Returns a LeaderboardMemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (LeaderboardMemberRanking)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaderboardMemberRanking>> GetLeaderboardRankingAsyncWithHttpInfo (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string language = null);
        /// <summary>
        /// Retrieve User Rankings
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;LeaderboardMemberRanking&gt;</returns>
        System.Threading.Tasks.Task<List<LeaderboardMemberRanking>> GetLeaderboardRankingsAsync (string memberType, string memberId, string startDate = null, string endDate = null, string language = null);

        /// <summary>
        /// Retrieve User Rankings
        /// </summary>
        /// <remarks>
        /// Returns an array of LeaderboardRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderboardMemberRanking&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LeaderboardMemberRanking>>> GetLeaderboardRankingsAsyncWithHttpInfo (string memberType, string memberId, string startDate = null, string endDate = null, string language = null);
        /// <summary>
        /// Retrieve Leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of Leaderboard items defined for the application.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;Leaderboard&gt;</returns>
        System.Threading.Tasks.Task<List<Leaderboard>> GetLeaderboardsAsync (int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null);

        /// <summary>
        /// Retrieve Leaderboards
        /// </summary>
        /// <remarks>
        /// Returns an array of Leaderboard items defined for the application.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Leaderboard&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Leaderboard>>> GetLeaderboardsAsyncWithHttpInfo (int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null);
        /// <summary>
        /// Reset user leaderboard data
        /// </summary>
        /// <remarks>
        /// Delete all leaderboard data, i.e. reset the leaderboard for the specified member.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="appId">The application ID</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <returns>Task of ActionResponse</returns>
        System.Threading.Tasks.Task<ActionResponse> ResetLeaderboardRankingsAsync (string memberType, string appId, string memberId);

        /// <summary>
        /// Reset user leaderboard data
        /// </summary>
        /// <remarks>
        /// Delete all leaderboard data, i.e. reset the leaderboard for the specified member.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="appId">The application ID</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ResetLeaderboardRankingsAsyncWithHttpInfo (string memberType, string appId, string memberId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class LeaderboardsApi : ILeaderboardsApi
    {
        private SCILL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeaderboardsApi(String basePath)
        {
            this.Configuration = new SCILL.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsApi"/> class
        /// </summary>
        /// <returns></returns>
        public LeaderboardsApi()
        {
            this.Configuration = SCILL.Client.Configuration.Default;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LeaderboardsApi(SCILL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SCILL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SCILL.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SCILL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve Leaderboard Provides the current leaderboard rankings for a specific leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Leaderboard</returns>
        public Leaderboard GetLeaderboard (string leaderboardId, int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null)
        {
             ApiResponse<Leaderboard> localVarResponse = GetLeaderboardWithHttpInfo(leaderboardId, currentPage, pageSize, startDate, endDate, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Leaderboard Provides the current leaderboard rankings for a specific leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of Leaderboard</returns>
        public ApiResponse< Leaderboard > GetLeaderboardWithHttpInfo (string leaderboardId, int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null)
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardsApi->GetLeaderboard");

            var localVarPath = "/api/v1/leaderboards/{leaderboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (leaderboardId != null) localVarPathParams.Add("leaderboardId", this.Configuration.ApiClient.ParameterToString(leaderboardId)); // path parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Leaderboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Leaderboard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Leaderboard)));
        }

        /// <summary>
        /// Retrieve Leaderboard Provides the current leaderboard rankings for a specific leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of Leaderboard</returns>
        public async System.Threading.Tasks.Task<Leaderboard> GetLeaderboardAsync (string leaderboardId, int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null)
        {
             ApiResponse<Leaderboard> localVarResponse = await GetLeaderboardAsyncWithHttpInfo(leaderboardId, currentPage, pageSize, startDate, endDate, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Leaderboard Provides the current leaderboard rankings for a specific leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (Leaderboard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Leaderboard>> GetLeaderboardAsyncWithHttpInfo (string leaderboardId, int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null)
        {
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardsApi->GetLeaderboard");

            var localVarPath = "/api/v1/leaderboards/{leaderboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (leaderboardId != null) localVarPathParams.Add("leaderboardId", this.Configuration.ApiClient.ParameterToString(leaderboardId)); // path parameter
            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Leaderboard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Leaderboard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Leaderboard)));
        }

        /// <summary>
        /// Retrieve User Ranking Returns a LeaderboardMemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>LeaderboardMemberRanking</returns>
        public LeaderboardMemberRanking GetLeaderboardRanking (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string language = null)
        {
             ApiResponse<LeaderboardMemberRanking> localVarResponse = GetLeaderboardRankingWithHttpInfo(memberType, memberId, leaderboardId, startDate, endDate, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve User Ranking Returns a LeaderboardMemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of LeaderboardMemberRanking</returns>
        public ApiResponse< LeaderboardMemberRanking > GetLeaderboardRankingWithHttpInfo (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string language = null)
        {
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling LeaderboardsApi->GetLeaderboardRanking");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling LeaderboardsApi->GetLeaderboardRanking");
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardsApi->GetLeaderboardRanking");

            var localVarPath = "/api/v1/leaderboards-members/{memberType}/{memberId}/{leaderboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberType != null) localVarPathParams.Add("memberType", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (leaderboardId != null) localVarPathParams.Add("leaderboardId", this.Configuration.ApiClient.ParameterToString(leaderboardId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardRanking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LeaderboardMemberRanking>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LeaderboardMemberRanking) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LeaderboardMemberRanking)));
        }

        /// <summary>
        /// Retrieve User Ranking Returns a LeaderboardMemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of LeaderboardMemberRanking</returns>
        public async System.Threading.Tasks.Task<LeaderboardMemberRanking> GetLeaderboardRankingAsync (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string language = null)
        {
             ApiResponse<LeaderboardMemberRanking> localVarResponse = await GetLeaderboardRankingAsyncWithHttpInfo(memberType, memberId, leaderboardId, startDate, endDate, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve User Ranking Returns a LeaderboardMemberRanking item for the specified leaderboard. Use this route to get the position of a user of team in a specified leaderboard.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="leaderboardId">The id of the leaderboard</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (LeaderboardMemberRanking)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LeaderboardMemberRanking>> GetLeaderboardRankingAsyncWithHttpInfo (string memberType, string memberId, string leaderboardId, string startDate = null, string endDate = null, string language = null)
        {
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling LeaderboardsApi->GetLeaderboardRanking");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling LeaderboardsApi->GetLeaderboardRanking");
            // verify the required parameter 'leaderboardId' is set
            if (leaderboardId == null)
                throw new ApiException(400, "Missing required parameter 'leaderboardId' when calling LeaderboardsApi->GetLeaderboardRanking");

            var localVarPath = "/api/v1/leaderboards-members/{memberType}/{memberId}/{leaderboardId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberType != null) localVarPathParams.Add("memberType", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (leaderboardId != null) localVarPathParams.Add("leaderboardId", this.Configuration.ApiClient.ParameterToString(leaderboardId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardRanking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LeaderboardMemberRanking>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LeaderboardMemberRanking) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LeaderboardMemberRanking)));
        }

        /// <summary>
        /// Retrieve User Rankings Returns an array of LeaderboardRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;LeaderboardMemberRanking&gt;</returns>
        public List<LeaderboardMemberRanking> GetLeaderboardRankings (string memberType, string memberId, string startDate = null, string endDate = null, string language = null)
        {
             ApiResponse<List<LeaderboardMemberRanking>> localVarResponse = GetLeaderboardRankingsWithHttpInfo(memberType, memberId, startDate, endDate, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve User Rankings Returns an array of LeaderboardRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;LeaderboardMemberRanking&gt;</returns>
        public ApiResponse< List<LeaderboardMemberRanking> > GetLeaderboardRankingsWithHttpInfo (string memberType, string memberId, string startDate = null, string endDate = null, string language = null)
        {
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling LeaderboardsApi->GetLeaderboardRankings");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling LeaderboardsApi->GetLeaderboardRankings");

            var localVarPath = "/api/v1/leaderboards-members/{memberType}/{memberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberType != null) localVarPathParams.Add("memberType", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardRankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderboardMemberRanking>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LeaderboardMemberRanking>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderboardMemberRanking>)));
        }

        /// <summary>
        /// Retrieve User Rankings Returns an array of LeaderboardRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;LeaderboardMemberRanking&gt;</returns>
        public async System.Threading.Tasks.Task<List<LeaderboardMemberRanking>> GetLeaderboardRankingsAsync (string memberType, string memberId, string startDate = null, string endDate = null, string language = null)
        {
             ApiResponse<List<LeaderboardMemberRanking>> localVarResponse = await GetLeaderboardRankingsAsyncWithHttpInfo(memberType, memberId, startDate, endDate, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve User Rankings Returns an array of LeaderboardRanking items defined for all leaderboards in the application specified for the user. If the member is not in the leaderboard, the rank will be -1 in the LeaderboardRanking object.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LeaderboardMemberRanking&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LeaderboardMemberRanking>>> GetLeaderboardRankingsAsyncWithHttpInfo (string memberType, string memberId, string startDate = null, string endDate = null, string language = null)
        {
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling LeaderboardsApi->GetLeaderboardRankings");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling LeaderboardsApi->GetLeaderboardRankings");

            var localVarPath = "/api/v1/leaderboards-members/{memberType}/{memberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberType != null) localVarPathParams.Add("memberType", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboardRankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LeaderboardMemberRanking>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LeaderboardMemberRanking>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LeaderboardMemberRanking>)));
        }

        /// <summary>
        /// Retrieve Leaderboards Returns an array of Leaderboard items defined for the application.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>List&lt;Leaderboard&gt;</returns>
        public List<Leaderboard> GetLeaderboards (int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null)
        {
             ApiResponse<List<Leaderboard>> localVarResponse = GetLeaderboardsWithHttpInfo(currentPage, pageSize, startDate, endDate, language);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Leaderboards Returns an array of Leaderboard items defined for the application.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>ApiResponse of List&lt;Leaderboard&gt;</returns>
        public ApiResponse< List<Leaderboard> > GetLeaderboardsWithHttpInfo (int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null)
        {

            var localVarPath = "/api/v1/leaderboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Leaderboard>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Leaderboard>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Leaderboard>)));
        }

        /// <summary>
        /// Retrieve Leaderboards Returns an array of Leaderboard items defined for the application.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of List&lt;Leaderboard&gt;</returns>
        public async System.Threading.Tasks.Task<List<Leaderboard>> GetLeaderboardsAsync (int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null)
        {
             ApiResponse<List<Leaderboard>> localVarResponse = await GetLeaderboardsAsyncWithHttpInfo(currentPage, pageSize, startDate, endDate, language);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Leaderboards Returns an array of Leaderboard items defined for the application.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">The page index starting at 1. The number of pageSize elements are returned for each page. Default value is 1 (optional)</param>
        /// <param name="pageSize">The number of elements per page. Default is 25. (optional)</param>
        /// <param name="startDate">The starting date for fetching results. (optional)</param>
        /// <param name="endDate">The ending date for fetching results. (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Leaderboard&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Leaderboard>>> GetLeaderboardsAsyncWithHttpInfo (int? currentPage = null, int? pageSize = null, string startDate = null, string endDate = null, string language = null)
        {

            var localVarPath = "/api/v1/leaderboards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLeaderboards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Leaderboard>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Leaderboard>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Leaderboard>)));
        }

        /// <summary>
        /// Reset user leaderboard data Delete all leaderboard data, i.e. reset the leaderboard for the specified member.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="appId">The application ID</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <returns>ActionResponse</returns>
        public ActionResponse ResetLeaderboardRankings (string memberType, string appId, string memberId)
        {
             ApiResponse<ActionResponse> localVarResponse = ResetLeaderboardRankingsWithHttpInfo(memberType, appId, memberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset user leaderboard data Delete all leaderboard data, i.e. reset the leaderboard for the specified member.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="appId">The application ID</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <returns>ApiResponse of ActionResponse</returns>
        public ApiResponse< ActionResponse > ResetLeaderboardRankingsWithHttpInfo (string memberType, string appId, string memberId)
        {
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling LeaderboardsApi->ResetLeaderboardRankings");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LeaderboardsApi->ResetLeaderboardRankings");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling LeaderboardsApi->ResetLeaderboardRankings");

            var localVarPath = "/api/v1/reset-leaderboard/{memberType}/{appId}/{memberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberType != null) localVarPathParams.Add("memberType", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetLeaderboardRankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

        /// <summary>
        /// Reset user leaderboard data Delete all leaderboard data, i.e. reset the leaderboard for the specified member.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="appId">The application ID</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <returns>Task of ActionResponse</returns>
        public async System.Threading.Tasks.Task<ActionResponse> ResetLeaderboardRankingsAsync (string memberType, string appId, string memberId)
        {
             ApiResponse<ActionResponse> localVarResponse = await ResetLeaderboardRankingsAsyncWithHttpInfo(memberType, appId, memberId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset user leaderboard data Delete all leaderboard data, i.e. reset the leaderboard for the specified member.
        /// </summary>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberType">The member type, can be user or team (right now) and sets which leaderboards should be selected.</param>
        /// <param name="appId">The application ID</param>
        /// <param name="memberId">Either the user_id or team_id you used when sending the events. The memberType flag identifies which one is used.</param>
        /// <returns>Task of ApiResponse (ActionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionResponse>> ResetLeaderboardRankingsAsyncWithHttpInfo (string memberType, string appId, string memberId)
        {
            // verify the required parameter 'memberType' is set
            if (memberType == null)
                throw new ApiException(400, "Missing required parameter 'memberType' when calling LeaderboardsApi->ResetLeaderboardRankings");
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling LeaderboardsApi->ResetLeaderboardRankings");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling LeaderboardsApi->ResetLeaderboardRankings");

            var localVarPath = "/api/v1/reset-leaderboard/{memberType}/{appId}/{memberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (memberType != null) localVarPathParams.Add("memberType", this.Configuration.ApiClient.ParameterToString(memberType)); // path parameter
            if (appId != null) localVarPathParams.Add("appId", this.Configuration.ApiClient.ParameterToString(appId)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            // authentication (BearerAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }
            // authentication (oAuthNoScopes) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetLeaderboardRankings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ActionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionResponse)));
        }

    }
}
