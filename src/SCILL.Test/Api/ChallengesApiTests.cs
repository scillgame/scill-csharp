/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using SCILL.Client;
using SCILL.Api;
using SCILL.Model;

namespace SCILL.Test
{
    /// <summary>
    ///  Class for testing ChallengesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ChallengesApiTests
    {
        private ChallengesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ChallengesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ChallengesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChallengesApi
            //Assert.IsInstanceOfType(typeof(ChallengesApi), instance, "instance is a ChallengesApi");
        }

        /// <summary>
        /// Test ActivatePersonalChallenge
        /// </summary>
        [Test]
        public void ActivatePersonalChallengeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string challengeId = null;
            //string language = null;
            //var response = instance.ActivatePersonalChallenge(appId, challengeId, language);
            //Assert.IsInstanceOf<ActionResponse> (response, "response is ActionResponse");
        }
        /// <summary>
        /// Test CancelPersonalChallenge
        /// </summary>
        [Test]
        public void CancelPersonalChallengeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string challengeId = null;
            //string language = null;
            //var response = instance.CancelPersonalChallenge(appId, challengeId, language);
            //Assert.IsInstanceOf<ActionResponse> (response, "response is ActionResponse");
        }
        /// <summary>
        /// Test ClaimPersonalChallengeReward
        /// </summary>
        [Test]
        public void ClaimPersonalChallengeRewardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string challengeId = null;
            //string language = null;
            //var response = instance.ClaimPersonalChallengeReward(appId, challengeId, language);
            //Assert.IsInstanceOf<ActionResponse> (response, "response is ActionResponse");
        }
        /// <summary>
        /// Test GenerateWebsocketAccessToken
        /// </summary>
        [Test]
        public void GenerateWebsocketAccessTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GenerateWebsocketAccessToken();
            //Assert.IsInstanceOf<SocketToken> (response, "response is SocketToken");
        }
        /// <summary>
        /// Test GetActivePersonalChallenges
        /// </summary>
        [Test]
        public void GetActivePersonalChallengesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string language = null;
            //var response = instance.GetActivePersonalChallenges(appId, language);
            //Assert.IsInstanceOf<List<ChallengeCategory>> (response, "response is List<ChallengeCategory>");
        }
        /// <summary>
        /// Test GetAllPersonalChallenges
        /// </summary>
        [Test]
        public void GetAllPersonalChallengesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //List<string> includeCategories = null;
            //List<string> excludeCategories = null;
            //string language = null;
            //var response = instance.GetAllPersonalChallenges(appId, includeCategories, excludeCategories, language);
            //Assert.IsInstanceOf<List<ChallengeCategory>> (response, "response is List<ChallengeCategory>");
        }
        /// <summary>
        /// Test GetPersonalChallengeById
        /// </summary>
        [Test]
        public void GetPersonalChallengeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string challengeId = null;
            //string language = null;
            //var response = instance.GetPersonalChallengeById(appId, challengeId, language);
            //Assert.IsInstanceOf<Challenge> (response, "response is Challenge");
        }
        /// <summary>
        /// Test GetPersonalChallenges
        /// </summary>
        [Test]
        public void GetPersonalChallengesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //List<string> includeCategories = null;
            //List<string> excludeCategories = null;
            //string language = null;
            //var response = instance.GetPersonalChallenges(appId, includeCategories, excludeCategories, language);
            //Assert.IsInstanceOf<List<ChallengeCategory>> (response, "response is List<ChallengeCategory>");
        }
        /// <summary>
        /// Test GetUnresolvedPersonalChallenges
        /// </summary>
        [Test]
        public void GetUnresolvedPersonalChallengesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //List<string> includeCategories = null;
            //List<string> excludeCategories = null;
            //string language = null;
            //var response = instance.GetUnresolvedPersonalChallenges(appId, includeCategories, excludeCategories, language);
            //Assert.IsInstanceOf<List<ChallengeCategory>> (response, "response is List<ChallengeCategory>");
        }
        /// <summary>
        /// Test ResetUserAppChallenges
        /// </summary>
        [Test]
        public void ResetUserAppChallengesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string userId = null;
            //var response = instance.ResetUserAppChallenges(appId, userId);
            //Assert.IsInstanceOf<ActionResponse> (response, "response is ActionResponse");
        }
        /// <summary>
        /// Test UnlockPersonalChallenge
        /// </summary>
        [Test]
        public void UnlockPersonalChallengeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //string challengeId = null;
            //string language = null;
            //var response = instance.UnlockPersonalChallenge(appId, challengeId, language);
            //Assert.IsInstanceOf<ActionResponse> (response, "response is ActionResponse");
        }
    }

}
